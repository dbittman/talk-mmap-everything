.pl 24
.ll 80
.lt 80
.sp 6
.color 1

.ad c
SeaOS, a Simple and Modern Operating System
.br
or: how I learned to stop worrying and love mmap(2)
.sp 4
.br
Daniel Bittman
.br
SSRC - UC Santa Cruz - 2016
.br
.sp 2
USENIX Vail Computer Elements Workshop 2016




.bp
.tl ||Wait, what's going on here?||
\l'60'

.bp
.tl ||Wait, what's going on here?||
\l'60'
.sp 8
This is running on SeaOS!
.br
.sp 2
\&...in an emulator.

.sp 4
\&...using troff and less for formatting.

.bp
.tl ''SeaOS is both old and new...''
\l'60'
.sp 6
I've been playing around with kernel code for a while.
.sp 3
This particular iteration is only a few months old.


.bp
.tl ''Why?''
\l'60'
.sp 6
.ad l
.in +1.5i
- Learning experience!
.sp
- Useful for research
.sp
.in +0.5i
- Demonstrated a VM security monitor breakout in 2015
.in -2i
.ad c






.bp
.tl ''SeaOS is for modern systems''
\l'60'
.sp 10
64-bit, mmu required.
.sp
Supports SMP
.sp
Runs on x86_64, armv8 (aarch64)









.bp
.tl ''SeaOS is Simple''
\l'60'
.sp
.TS
center allbox tab(@);
rbrb
rr
rr.
Kernel@Lines of Code
Linux@~1,000,000
SeaOS@4,500
.TE
.sp 5
.ad c
(this excludes drivers and fs code)
.sp 7
Generated using David A. Wheeler's 'SLOCCount'

.bp
.tl ''SeaOS is Portable''
\l'60'
.sp 6
1800 lines of x86_64 specific code
.sp
1150 lines of armv8 specific code






.bp
.tl ''Some Design Considerations''
\l'60'
.sp 6
.ad l
.in +1.5i
\(bu _At this point_, assumming SMP.
.sp 2
\(bu Core kernel has minimal global shared state.
.sp 2
\(bu Multikernel considerations?
.sp 2
\(bu Make threading _low overhead_.
.in -1.5i
.ad c



.bp
.tl ''Unix Compatibility Layer''
\l'60'
.sp 6
Currently implemented in-kernel.
.sp
Would like to move as much as possible into userspace...







.bp
.tl ''My favorite syscall: mmap''
\l'60'

.ad l
.in +2.6i
.sp 4
___  ______  ___  ___  ______
.br
|  \\/  ||  \\/  | / _ \\ | ___ \\
.br
| .  . || .  . |/ /_\\ \\| |_/ /
.br
| |\\/| || |\\/| ||  _  ||  __/
.br
| |  | || |  | || | | || |
.br
\\_|  |_/\\_|  |_/\\_| |_/\\_|
.br

.in -2.6i
.ad c

.sp 3
mmap is really cool.

.bp
.tl ''What can you do with mmap in SeaOS?''
\l'60'
.sp 5
.ad l
.in +1i
The normal stuff:
.sp
.in +0.5i
- Userspace can call mmap(3) and friends.
.sp
- ELF files are loaded by mmap'ing program headers.
.sp 2
.in -0.5i
The less-normal, but still not that abnormal stuff:
.sp
.in +0.5i
- Device memory can be mmap'ed (/dev/vga).

.in 0
.ad c










.bp
\l'60'
.tl ''Networking Stack''
.sp 6
.ll -1i
.in 1i
SeaOS needs a networking stack. We could just
implement an in-kernel networking stack...



.bp
\l'60'
.tl ''Networking Stack''
.sp 6
SeaOS needs a networking stack. We could just
implement an in-kernel networking stack...
.sp
\&...but we've got mmap!
.sp 2
.ad l
.in +1i

\(bu Privaleged process does mmap to get a receive buffer
\(bu NIC reads packets into that buffer
\(bu ...and now packets are in userspace

.in 0
.ad c






.bp
.tl ''Networking in Userspace - Switching Process''
\l'60'
.sp 5
.ad l
+---------------------+        +----------------+
.br
| [C1]... [Cn]<->[NN] |        |  [Cn]          |  . . .
.br
+---------------------+        +----------------+
.br
 Packet Switcher  ^             Client n
.br
                  | DMA
.br
                  |
.br
+---------------------+
.br
|   [Buffer lists...] |
.br
+---------------------+
.br
 NIC


.bp
.tl ''What about other UNIX system calls?''
\l'60'
.sp 4
SeaOS supports calls like read, readv, write, etc.

.bp
.tl ''What about other UNIX system calls?''
\l'60'
.sp 4
SeaOS supports calls like read, readv, write, etc.
.sp 4
\&...so can we do that with mmap?
