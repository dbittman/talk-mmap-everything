.pl 24
.ll 80
.lt 80
.sp 6
.color 1

.ad c
SeaOS: A simple OS for multicore machines
.br
or: how I learned to stop worrying and love mmap
.sp 4
.br
Daniel Bittman
.br
SSRC - UC Santa Cruz - 2016
.br
.sp 2
USENIX Vail Computer Elements Workshop 2016


.bp
.tl ||Wait, what's going on here?||
\l'60'

.bp
.tl ||Wait, what's going on here?||
\l'60'
.sp 8
This is running on SeaOS!
.br
.sp 2
\&...in an emulator.

.sp 4
\&...using troff and less for formatting.

.bp
.tl ''SeaOS is both old and new...''
\l'60'
.sp 6
I've been playing around with kernel code for a while.
.sp 3
This particular iteration is only a few months old.


.bp
.tl ''Why?''
\l'60'
.sp 6
.ad l
.in +1.5i
\(bu Learning experience!
.sp
\(bu Useful for research
.sp
.in +0.5i
\(bu Demonstrated a VM monitor breakout in 2015 [1]
.in -2i
.ad c


.bp
.ad c
.in 0
.tl ''SeaOS is simple''
\l'60'
.sp
.TS
center allbox tab(@);
rbrb
rr
rr.
Kernel@Lines of Code
Linux@~1,000,000
SeaOS@4,500
.TE
.sp 5
.ad c
(this excludes drivers and fs code)
.sp 7
Generated using David A. Wheeler's 'SLOCCount'
.bp
.tl ''SeaOS is for modern systems''
\l'60'
.sp 7
.ad l
.in +1.5i
\(bu 64-bit, mmu required
.sp
\(bu Supports SMP
.sp
\(bu Runs on x86_64, armv8 (aarch64)


.bp
.in 0
.ad c
.tl ''SeaOS is portable''
\l'60'
.sp 6
1800 lines of x86_64 specific code
.sp
1150 lines of armv8 specific code

.bp
.tl ''Some design considerations''
\l'60'
.sp 6
.ad l
.in +1.5i
\(bu At this point, assumming SMP
.sp 2
\(bu Core kernel has minimal global shared state
.sp 2
\(bu Multikernel considerations? [2]
.sp 2
\(bu Can I make threading lower overhead?
.in -1.5i
.ad c



.bp
.tl ''Unix compatibility layer''
\l'60'
.sp 6
Currently implemented in-kernel.
.sp
Would like to move as much of it as possible into userspace...

.bp
.tl ''My favorite syscall: mmap''
\l'60'

.ad l
.in +2.6i
.sp 4
___  ______  ___  ___  ______
.br
|  \\/  ||  \\/  | / _ \\ | ___ \\
.br
| .  . || .  . |/ /_\\ \\| |_/ /
.br
| |\\/| || |\\/| ||  _  ||  __/
.br
| |  | || |  | || | | || |
.br
\\_|  |_/\\_|  |_/\\_| |_/\\_|
.br

.in -2.6i
.ad c

.sp 3
mmap is really cool.

.bp
.tl ''What can you do with mmap in SeaOS?''
\l'60'
.sp 5
.ad l
.in +1i
The normal stuff:
.sp
.in +0.5i
\(bu Userspace can call mmap(3) and friends
.sp
\(bu ELF files are loaded by mmap'ing program headers
.sp 2
.in -0.5i
Other, more interesting stuff:
.sp
.in +0.5i
\(bu Device memory can be mmap'ed (/dev/vga)

.in 0
.ad c

.bp
\l'60'
.tl ''Networking stack''
.sp 6
.ll -1i
.in 1i
SeaOS needs a networking stack. I could just
implement an in-kernel networking stack...


.in 0
.ll +1i

.bp
\l'60'
.tl ''Networking stack''
.sp 6
.ll -1i
.in +1i
SeaOS needs a networking stack. I could just
implement an in-kernel networking stack...
.sp
\&...but there's mmap!
.sp 2
.ad l

\(bu Privaleged process does mmap to get a receive buffer [3]
.sp
\(bu NIC reads packets into that buffer
.sp
\(bu ...and now packets are in userspace

.ad c
.bp
.in 0
.tl ''Networking in userspace - switching process''
.ad c
.ll 80
\l'60'
.sp 2
.in +2i
.ad l

+------------------------+
.br
| [C1]      [other data] |
.br
+------------------------+
.br
   |               Client
.br
   | (Shared mem)
.br
   |
.br
+-------------------------------+
.br
| [C1]... [Cn] <---[Rx Packets] |
.br
+-------------------------------+
.br
 Packet Switcher  ^ DMA
.br
                  | (Shared mem)
.br
                  |
.br
+---------------------+
.br
|   [Buffer lists...] |
.br
+---------------------+
.br
 NIC
.bp
.in 0
.ad c
.tl ''Tx methods?''
\l'60'
.sp 5
.in +1i
.ad l

+----------------------+     +-----------------+
.br
| [Tx Q]    [Net Data] |     | [Net Data (RW)] |
.br
+----------------------+     +-----------------+
.br
    |            Client       Packet Switcher
.br
    |
.br
    |      +--------------+
.br
    +--->  | [Tx Q]...    |
.br
           +--------------+
.br
            NIC

.bp
.in 0
.ad c
.ll 80
.tl ''Zero-copy, more sharing''
\l'60'

.sp 5
.ad l
.in +1i
+---------------------+
.br
| [Packets]           |
.br
+---------------------+
.br
     ^          Client
.br
     |
.br
     |
.br
+---------------------+
.br
| [Rx Buffers]        |
.br
+---------------------+
.br
 NIC
.br


.bp
.in 0
.tl ''Zero-copy, more sharing (pt. 2)''
.ad c
\l'60'
.sp 5
.ad l
.in +1i
+----------------------------------------------+
.br
| [Packets]  [Shared Net Data]  [Net Library]  |
.br
+----------------------------------------------+
.br
     ^                           Client
.br
     |
.br
     |
.br
+---------------------+
.br
| [Rx Buffers]        |
.br
+---------------------+
.br
 NIC
.br


.bp
.in 0
.ad c
.ll 80
.tl ''What about other UNIX system calls?''
\l'60'
.sp 4
SeaOS supports calls like read, readv, write, etc.

.bp
.tl ''What about other UNIX system calls?''
\l'60'
.sp 4
SeaOS supports calls like read, readv, write, etc.
.sp 4
\&...can they be implemented with mmap?


.bp
.tl ''Running UNIX on top of mmap''
\l'60'
.sp 5
read(2) is easy (especially if the buffer is page-aligned)
.sp 1
write(2) is a bit trickier...
.sp
\&...or maybe mmap isn't powerful enough?
.sp 3
(and there's all of the filesystem manipulation system calls)

.bp
.tl ''Concurrency''
\l'60'

.bp
.tl ''Concurrency''
\l'60'
.ll -1i
.in +1i
.sp 5
Simplicity helps with reasoning about the complexities of a highly concurrent system.
.sp 2
Assuming SMP; allow for multikernel-like behavior
.sp 2
Playing about with lock-free and low-lock data structures and algorithms




.bp
.ll +1i
.in 0
.tl ''Conclusion''
\l'60'
.sp 5
SeaOS is a simple, portable, and easy-to-modify OS.
.sp 2
I plan to use SeaOS to play around with interesting things.
.sp
The more interesting things, the better.

.bp
.tl ''Thank you!''
\l'60'
.sp 5
Daniel Bittman
.sp
danielbittman1@gmail.com
.sp
dbittman.github.io
.sp
@danielbittman

.sp 4
This talk is available on github:
github.com/dbittman/talk-mmap-everything

.bp
.tl ''References''
\l'60'
.sp 3
.in 1i
.ll -1i

1. DJ Capelis, Daniel Bittman. "The Hypervisor Exploit I Sat on for Five Years". PoC||GTFO 0x08, June, 2015.
.sp
2. Baumann, Andrew, et al. "The multikernel: a new OS architecture for scalable multicore systems." Proceedings of the ACM SIGOPS 22nd symposium on Operating systems principles. ACM, 2009.
.sp
3. Rizzo, Luigi. "Netmap: a novel framework for fast packet I/O." 21st USENIX Security Symposium (USENIX Security 12). 2012.
